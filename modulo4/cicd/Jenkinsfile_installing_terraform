pipeline {
    agent any
    environment {
        AWS_CREDENTIALS_ID = 'aws-credentials-id'
        TERRAFORM_VERSION = "1.9.6" // Cambia esto a la versión que necesitas
    }

    parameters {
        choice(name: 'ENVIRONMENT', choices: ['dev', 'staging', 'prod'], description: 'Selecciona el entorno de despliegue')
    }

    stages {
        stage('Install Terraform') {
            steps {
                script {
                    // Comprobar si Terraform está instalado
                    def terraformInstalled = sh(script: 'which terraform || true', returnStatus: true) == 0
                    if (!terraformInstalled) {
                        // Instalar Terraform si no está instalado
                        sh """
                        curl -O https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
                        unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip
                        sudo mv terraform /usr/local/bin/
                        terraform -version
                        """
                    } else {
                        echo "Terraform ya está instalado"
                    }
                }
            }
        }

        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/pedrofenix19/curso-avanzado-terraform.git'
            }
        }
        
        stage('Terraform Init') {
            steps {
                sh 'terraform init'
            }
        }

        stage('Terraform Validate') {
            steps {
                script {
                    sh "terraform validate"
                }
            }
        }
        
       
        stage('Terraform Plan') {
            steps {
                script {
                    sh "terraform plan -var-file=${params.ENVIRONMENT}.tfvars -out=tfplan"
                }
            }
        }

        stage('Aprobación para Despliegue en Producción') {
            when {
                expression {
                    params.ENVIRONMENT == 'prod'
                }
            }
            steps {
                input message: '¿Deseas aplicar los cambios en producción?', ok: 'Desplegar'
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    sh "terraform apply tfplan"
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo '¡Despliegue exitoso!'
        }
        failure {
            echo 'El despliegue ha fallado.'
        }
    }
}
